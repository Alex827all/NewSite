#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ:
  ‚Ä¢ POST /    ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π JSON –≤ data.json (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞)
  ‚Ä¢ GET  /    ‚Üí –æ—Ç–¥–∞—ë—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏–∑ data.json
–†–∞–±–æ—Ç–∞–µ—Ç –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –Ω–∞ Replit/Railway/Render ‚Äî –ø–æ—Ä—Ç –±–µ—Ä—ë—Ç—Å—è –∏–∑ env-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT.
"""

import json
import os
from http.server import BaseHTTPRequestHandler, HTTPServer

HOST = "0.0.0.0"
PORT = int(os.environ.get("PORT", 8080))      # ‚ûú 8080 –ª–æ–∫–∞–ª—å–Ω–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–Ω–ª–∞–π–Ω
DATA_FILE = "data.json"


def init_storage() -> None:
    """–°–æ–∑–¥–∞—ë–º data.json, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ [])."""
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump("file", f, ensure_ascii=False)


def load_all() -> list:
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π)."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def append_entry(entry: dict) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª."""
    data = load_all()
    data.append(entry)
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


class SimpleAPI(BaseHTTPRequestHandler):
    def _json_response(self, payload, status=200):
        payload_bytes = json.dumps(payload, ensure_ascii=False).encode("utf-8")
        self.send_response(status)
        self.send_header("Content-Type", "application/json; charset=utf-8")
        self.end_headers()
        self.wfile.write(payload_bytes)

    # -------- POST / --------
    def do_POST(self):
        length = int(self.headers.get("Content-Length", 0))
        raw = self.rfile.read(length)

        try:
            entry = json.loads(raw.decode("utf-8"))
        except json.JSONDecodeError:
            self._json_response({"error": "Invalid JSON"}, status=400)
            return

        append_entry(entry)
        self._json_response({"status": "saved"})

    # -------- GET / --------
    def do_GET(self):
        self._json_response(load_all())


if __name__ == "__main__":
    init_storage()
    print(f"üöÄ Server running at http://localhost:{PORT}")
    HTTPServer((HOST, PORT), SimpleAPI).serve_forever()
