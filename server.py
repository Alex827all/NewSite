#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–µ–π—à–µ–µ key-value JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

 ‚Ä¢ POST   /        ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ (JSON)
 ‚Ä¢ GET    /        ‚Üí –æ—Ç–¥–∞—ë—Ç –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å
 ‚Ä¢ DELETE /<key>   ‚Üí —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ –∫–ª—é—á—É

–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Replit/Railway: –ø–æ—Ä—Ç –±–µ—Ä—ë—Ç—Å—è –∏–∑ env ¬´PORT¬ª.
"""

import json
import os
import uuid
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse

HOST = "0.0.0.0"
PORT = int(os.environ.get("PORT", 8080))
DATA_FILE = "data.json"


# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def ensure_storage_file() -> None:
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å)."""
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False)


def read_storage() -> dict:
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞; –≤–µ—Ä–Ω—É—Ç—å {} –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            raw = f.read().strip()
            return json.loads(raw) if raw else {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def write_storage(data: dict) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ---------- HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------

class KVHandler(BaseHTTPRequestHandler):
    def _json_response(self, payload, status=200):
        body = json.dumps(payload, ensure_ascii=False).encode("utf-8")
        self.send_response(status)
        self.send_header("Content-Type", "application/json; charset=utf-8")
        self.send_header("Content-Length", str(len(body)))
        self.end_headers()
        self.wfile.write(body)

    # ======== POST / ========
    def do_POST(self):
        length = int(self.headers.get("Content-Length", 0))
        raw = self.rfile.read(length)

        try:
            incoming = json.loads(raw.decode("utf-8"))
        except json.JSONDecodeError:
            self._json_response({"error": "invalid JSON"}, 400)
            return

        store = read_storage()

        if isinstance(incoming, dict):
            # –°–ª–∏–≤–∞–µ–º –ø—Ä–∏—à–µ–¥—à–∏–π –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            store.update(incoming)
        else:
            # –ö–ª–∞–¥—ë–º –ø–æ–¥ —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º –∫–ª—é—á–æ–º
            store[uuid.uuid4().hex[:8]] = incoming

        write_storage(store)
        self._json_response({"status": "ok", "size": len(store)})

    # ======== GET / ========
    def do_GET(self):
        self._json_response(read_storage())

    # ======== DELETE /<key> ========
    def do_DELETE(self):
        key = urlparse(self.path).path.lstrip("/")
        if not key:
            self._json_response({"error": "missing key"}, 400)
            return

        store = read_storage()
        if key in store:
            del store[key]
            write_storage(store)
            self._json_response({"status": "deleted", "key": key})
        else:
            self._json_response({"error": "key not found"}, 404)


# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------

if __name__ == "__main__":
    ensure_storage_file()
    print(f"üöÄ Server running at http://localhost:{PORT}")
    HTTPServer((HOST, PORT), KVHandler).serve_forever()
